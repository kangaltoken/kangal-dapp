/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AuctionInterface extends ethers.utils.Interface {
  functions: {
    "bid(uint256,uint256)": FunctionFragment;
    "bidToken()": FunctionFragment;
    "burnAddress()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "createOrder(address,uint256,uint256,uint256)": FunctionFragment;
    "endTimestampOf(uint256)": FunctionFragment;
    "lastOrderId()": FunctionFragment;
    "minimumBidIncrease()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderById(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replacedBidBurnPct()": FunctionFragment;
    "setBidToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bidToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTimestampOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumBidIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacedBidBurnPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBidToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimestampOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumBidIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacedBidBurnPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CancelOrder(uint256,address)": EventFragment;
    "Claim(uint256,address)": EventFragment;
    "NewBid(uint256,uint256)": EventFragment;
    "NewOrder(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Auction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionInterface;

  functions: {
    bid(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bid(uint256,uint256)"(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bidToken(overrides?: CallOverrides): Promise<[string]>;

    "bidToken()"(overrides?: CallOverrides): Promise<[string]>;

    burnAddress(overrides?: CallOverrides): Promise<[string]>;

    "burnAddress()"(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createOrder(address,uint256,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimestampOf(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "endTimestampOf(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastOrderId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumBidIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumBidIncrease()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    orderById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        startTimestamp: BigNumber;
        endTimestampOffset: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        hasBeenClaimed: boolean;
      }
    >;

    "orderById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        startTimestamp: BigNumber;
        endTimestampOffset: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        hasBeenClaimed: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replacedBidBurnPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    "replacedBidBurnPct()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBidToken(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBidToken(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    _orderId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bid(uint256,uint256)"(
    _orderId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bidToken(overrides?: CallOverrides): Promise<string>;

  "bidToken()"(overrides?: CallOverrides): Promise<string>;

  burnAddress(overrides?: CallOverrides): Promise<string>;

  "burnAddress()"(overrides?: CallOverrides): Promise<string>;

  claim(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    _token: string,
    _tokenId: BigNumberish,
    _startPrice: BigNumberish,
    _endTimestampOffset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createOrder(address,uint256,uint256,uint256)"(
    _token: string,
    _tokenId: BigNumberish,
    _startPrice: BigNumberish,
    _endTimestampOffset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimestampOf(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "endTimestampOf(uint256)"(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  "lastOrderId()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  orderById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      seller: string;
      token: string;
      tokenId: BigNumber;
      startPrice: BigNumber;
      startTimestamp: BigNumber;
      endTimestampOffset: BigNumber;
      lastBidPrice: BigNumber;
      lastBidder: string;
      hasBeenClaimed: boolean;
    }
  >;

  "orderById(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      seller: string;
      token: string;
      tokenId: BigNumber;
      startPrice: BigNumber;
      startTimestamp: BigNumber;
      endTimestampOffset: BigNumber;
      lastBidPrice: BigNumber;
      lastBidder: string;
      hasBeenClaimed: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replacedBidBurnPct(overrides?: CallOverrides): Promise<BigNumber>;

  "replacedBidBurnPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  setBidToken(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBidToken(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bid(uint256,uint256)"(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bidToken(overrides?: CallOverrides): Promise<string>;

    "bidToken()"(overrides?: CallOverrides): Promise<string>;

    burnAddress(overrides?: CallOverrides): Promise<string>;

    "burnAddress()"(overrides?: CallOverrides): Promise<string>;

    claim(_orderId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOrder(address,uint256,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTimestampOf(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "endTimestampOf(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastOrderId()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orderById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        startTimestamp: BigNumber;
        endTimestampOffset: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        hasBeenClaimed: boolean;
      }
    >;

    "orderById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        seller: string;
        token: string;
        tokenId: BigNumber;
        startPrice: BigNumber;
        startTimestamp: BigNumber;
        endTimestampOffset: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        hasBeenClaimed: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    replacedBidBurnPct(overrides?: CallOverrides): Promise<BigNumber>;

    "replacedBidBurnPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBidToken(_address: string, overrides?: CallOverrides): Promise<void>;

    "setBidToken(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CancelOrder(
      orderId: BigNumberish | null,
      seller: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { orderId: BigNumber; seller: string }
    >;

    Claim(
      orderId: BigNumberish | null,
      buyer: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { orderId: BigNumber; buyer: string }
    >;

    NewBid(
      orderId: BigNumberish | null,
      price: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { orderId: BigNumber; price: BigNumber }
    >;

    NewOrder(
      orderId: BigNumberish | null,
      token: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { orderId: BigNumber; token: string; tokenId: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    bid(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bid(uint256,uint256)"(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bidToken(overrides?: CallOverrides): Promise<BigNumber>;

    "bidToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "burnAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrder(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createOrder(address,uint256,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimestampOf(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "endTimestampOf(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastOrderId()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    orderById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replacedBidBurnPct(overrides?: CallOverrides): Promise<BigNumber>;

    "replacedBidBurnPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBidToken(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBidToken(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bid(uint256,uint256)"(
      _orderId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bidToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bidToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createOrder(address,uint256,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _startPrice: BigNumberish,
      _endTimestampOffset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimestampOf(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "endTimestampOf(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastOrderId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumBidIncrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumBidIncrease()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    orderById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replacedBidBurnPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "replacedBidBurnPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBidToken(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBidToken(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
