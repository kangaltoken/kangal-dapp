/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "../commons";

interface StakingContractInterface extends ethers.utils.Interface {
  functions: {
    "APRM()": FunctionFragment;
    "calculateLatestRewards(address)": FunctionFragment;
    "calculateTotalPendingRewards(address)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositsPaused()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "feeVaultAddress()": FunctionFragment;
    "firstDepositTimestamps(address)": FunctionFragment;
    "minimumStakeAmount()": FunctionFragment;
    "minimumStakeTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseDeposits(bool)": FunctionFragment;
    "pauseWithdrawals(bool)": FunctionFragment;
    "pendingRewardsUpToLastDeposit(address)": FunctionFragment;
    "processingFeeForStakedToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardCalculationStartTimestamps(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setFeeVaultAddress(address)": FunctionFragment;
    "setMinimumStakeAmount(uint256)": FunctionFragment;
    "setMinimumStakeTime(uint256)": FunctionFragment;
    "stakedBalances(address)": FunctionFragment;
    "stakedToken()": FunctionFragment;
    "totalStakedSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawalsPaused()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "APRM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateLatestRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalPendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstDepositTimestamps",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseWithdrawals",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewardsUpToLastDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processingFeeForStakedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalculationStartTimestamps",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalsPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "APRM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateLatestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstDepositTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardsUpToLastDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processingFeeForStakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalculationStartTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsPaused",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "DepositsPaused(bool)": EventFragment;
    "EmergencyWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardClaim(address,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
    "WithdrawalsPaused(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsPaused"): EventFragment;
}

export class StakingContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingContractInterface;

  functions: {
    APRM(overrides?: CallOverrides): Promise<[BigNumber]>;

    "APRM()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateLatestRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateLatestRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTotalPendingRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateTotalPendingRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "depositsPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    "feeVaultAddress()"(overrides?: CallOverrides): Promise<[string]>;

    firstDepositTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "firstDepositTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStakeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumStakeTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pauseDeposits(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseDeposits(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseWithdrawals(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseWithdrawals(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingRewardsUpToLastDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingRewardsUpToLastDeposit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    processingFeeForStakedToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "processingFeeForStakedToken()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCalculationStartTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardCalculationStartTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    setFeeVaultAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeeVaultAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinimumStakeAmount(uint256)"(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumStakeTime(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinimumStakeTime(uint256)"(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedToken(overrides?: CallOverrides): Promise<[string]>;

    "stakedToken()"(overrides?: CallOverrides): Promise<[string]>;

    totalStakedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  APRM(overrides?: CallOverrides): Promise<BigNumber>;

  "APRM()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateLatestRewards(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateLatestRewards(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalPendingRewards(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateTotalPendingRewards(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositsPaused(overrides?: CallOverrides): Promise<boolean>;

  "depositsPaused()"(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeVaultAddress(overrides?: CallOverrides): Promise<string>;

  "feeVaultAddress()"(overrides?: CallOverrides): Promise<string>;

  firstDepositTimestamps(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "firstDepositTimestamps(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumStakeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pauseDeposits(
    pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseDeposits(bool)"(
    pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseWithdrawals(
    pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseWithdrawals(bool)"(
    pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingRewardsUpToLastDeposit(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingRewardsUpToLastDeposit(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processingFeeForStakedToken(overrides?: CallOverrides): Promise<BigNumber>;

  "processingFeeForStakedToken()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCalculationStartTimestamps(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardCalculationStartTimestamps(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  setFeeVaultAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeeVaultAddress(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumStakeAmount(
    _minimumStakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinimumStakeAmount(uint256)"(
    _minimumStakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumStakeTime(
    _minimumStakeTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinimumStakeTime(uint256)"(
    _minimumStakeTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakedBalances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedToken(overrides?: CallOverrides): Promise<string>;

  "stakedToken()"(overrides?: CallOverrides): Promise<string>;

  totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

  "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    APRM(overrides?: CallOverrides): Promise<BigNumber>;

    "APRM()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLatestRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPendingRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTotalPendingRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    "claimRewards()"(overrides?: CallOverrides): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositsPaused(overrides?: CallOverrides): Promise<boolean>;

    "depositsPaused()"(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    "emergencyWithdraw()"(overrides?: CallOverrides): Promise<void>;

    feeVaultAddress(overrides?: CallOverrides): Promise<string>;

    "feeVaultAddress()"(overrides?: CallOverrides): Promise<string>;

    firstDepositTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "firstDepositTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pauseDeposits(pause: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseDeposits(bool)"(
      pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseWithdrawals(pause: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseWithdrawals(bool)"(
      pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingRewardsUpToLastDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewardsUpToLastDeposit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processingFeeForStakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "processingFeeForStakedToken()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardCalculationStartTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardCalculationStartTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    setFeeVaultAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeVaultAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumStakeAmount(uint256)"(
      _minimumStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumStakeTime(
      _minimumStakeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumStakeTime(uint256)"(
      _minimumStakeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedToken(overrides?: CallOverrides): Promise<string>;

    "stakedToken()"(overrides?: CallOverrides): Promise<string>;

    totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Deposit(
      account: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    DepositsPaused(
      paused: boolean | null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    EmergencyWithdrawal(
      account: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RewardClaim(
      account: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Withdrawal(
      account: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    WithdrawalsPaused(
      paused: boolean | null
    ): TypedEventFilter<[boolean], { paused: boolean }>;
  };

  estimateGas: {
    APRM(overrides?: CallOverrides): Promise<BigNumber>;

    "APRM()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLatestRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalPendingRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTotalPendingRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "depositsPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "feeVaultAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstDepositTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "firstDepositTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseDeposits(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseDeposits(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseWithdrawals(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseWithdrawals(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingRewardsUpToLastDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewardsUpToLastDeposit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processingFeeForStakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "processingFeeForStakedToken()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCalculationStartTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardCalculationStartTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeVaultAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeeVaultAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinimumStakeAmount(uint256)"(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumStakeTime(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinimumStakeTime(uint256)"(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    APRM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "APRM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateLatestRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateLatestRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalPendingRewards(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTotalPendingRewards(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositsPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeVaultAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstDepositTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstDepositTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumStakeTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseDeposits(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseDeposits(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseWithdrawals(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseWithdrawals(bool)"(
      pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingRewardsUpToLastDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewardsUpToLastDeposit(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processingFeeForStakedToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "processingFeeForStakedToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCalculationStartTimestamps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardCalculationStartTimestamps(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeVaultAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeVaultAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumStakeAmount(uint256)"(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStakeTime(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumStakeTime(uint256)"(
      _minimumStakeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakedSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalsPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
